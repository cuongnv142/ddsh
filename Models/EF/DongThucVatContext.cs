// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DongThucVatQuangTri.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DongThucVatQuangTri.Models.EF
{
    public partial class DongThucVatContext : DbContext
    {
        public DongThucVatContext()
        {
        }
        public DongThucVatContext(DbContextOptions options) : base(options)
        {

        }
        //public DongThucVatContext(DbContextOptions<DongThucVatContext> options)
        //    : base(options)
        //{
        //}

        public virtual DbSet<AuthAssignment> AuthAssignment { get; set; }
        public virtual DbSet<AuthItem> AuthItem { get; set; }
        public virtual DbSet<AuthItemChild> AuthItemChild { get; set; }
        public virtual DbSet<AuthRule> AuthRule { get; set; }
        public virtual DbSet<Banner> Banner { get; set; }
        public virtual DbSet<BannerCat> BannerCat { get; set; }
        public virtual DbSet<Boxpage> Boxpage { get; set; }
        public virtual DbSet<BoxpageCat> BoxpageCat { get; set; }
        public virtual DbSet<BoxpageMedia> BoxpageMedia { get; set; }
        public virtual DbSet<CitiesDistrict> CitiesDistrict { get; set; }
        public virtual DbSet<CitiesStreet> CitiesStreet { get; set; }
        public virtual DbSet<CitiesWard> CitiesWard { get; set; }
        public virtual DbSet<DtvBo> DtvBo { get; set; }
        public virtual DbSet<DtvHo> DtvHo { get; set; }
        public virtual DbSet<DtvLoai> DtvLoai { get; set; }
        public virtual DbSet<DtvLop> DtvLop { get; set; }
        public virtual DbSet<DtvNganh> DtvNganh { get; set; }
        public virtual DbSet<EmailLetter> EmailLetter { get; set; }
        public virtual DbSet<ImageGeneral> ImageGeneral { get; set; }
        public virtual DbSet<ImageGeneralDirectory> ImageGeneralDirectory { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LogAction> LogAction { get; set; }
        public virtual DbSet<LogActionAdmin> LogActionAdmin { get; set; }
        public virtual DbSet<LogIpLogin> LogIpLogin { get; set; }
        public virtual DbSet<LogSubscribeError> LogSubscribeError { get; set; }
        public virtual DbSet<Menus> Menus { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsCat> NewsCat { get; set; }
        public virtual DbSet<NewsCatRel> NewsCatRel { get; set; }
        public virtual DbSet<RoutePage> RoutePage { get; set; }
        public virtual DbSet<SeoPage> SeoPage { get; set; }
        public virtual DbSet<SiteContact> SiteContact { get; set; }
        public virtual DbSet<Subscribe> Subscribe { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<TagRel> TagRel { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AuthAssignment>(entity =>
            {
                entity.HasKey(e => new { e.ItemName, e.UserId })
                    .HasName("PK_auth_assignment_item_name");

                entity.ToTable("auth_assignment", "dongthucvat");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .HasColumnName("item_name");

                entity.Property(e => e.UserId)
                    .HasMaxLength(64)
                    .HasColumnName("user_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.HasOne(d => d.ItemNameNavigation)
                    .WithMany(p => p.AuthAssignment)
                    .HasForeignKey(d => d.ItemName)
                    .HasConstraintName("auth_assignment$auth_assignment_ibfk_1");
            });

            modelBuilder.Entity<AuthItem>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK_auth_item_name");

                entity.ToTable("auth_item", "dongthucvat");

                entity.HasIndex(e => e.RuleName, "rule_name");

                entity.HasIndex(e => e.Type, "type");

                entity.Property(e => e.Name)
                    .HasMaxLength(64)
                    .HasColumnName("name");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Data).HasColumnName("data");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.RuleName)
                    .HasMaxLength(64)
                    .HasColumnName("rule_name");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.HasOne(d => d.RuleNameNavigation)
                    .WithMany(p => p.AuthItem)
                    .HasForeignKey(d => d.RuleName)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("auth_item$auth_item_ibfk_1");
            });

            modelBuilder.Entity<AuthItemChild>(entity =>
            {
                entity.HasKey(e => new { e.Parent, e.Child })
                    .HasName("PK_auth_item_child_parent");

                entity.ToTable("auth_item_child", "dongthucvat");

                entity.HasIndex(e => e.Child, "child");

                entity.Property(e => e.Parent)
                    .HasMaxLength(64)
                    .HasColumnName("parent");

                entity.Property(e => e.Child)
                    .HasMaxLength(64)
                    .HasColumnName("child");

                entity.HasOne(d => d.ParentNavigation)
                    .WithMany(p => p.AuthItemChild)
                    .HasForeignKey(d => d.Parent)
                    .HasConstraintName("auth_item_child$auth_item_child_ibfk_1");
            });

            modelBuilder.Entity<AuthRule>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK_auth_rule_name");

                entity.ToTable("auth_rule", "dongthucvat");

                entity.Property(e => e.Name)
                    .HasMaxLength(64)
                    .HasColumnName("name");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Data).HasColumnName("data");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<Banner>(entity =>
            {
                entity.ToTable("banner", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BannerCatId).HasColumnName("banner_cat_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Link)
                    .HasMaxLength(500)
                    .HasColumnName("link");

                entity.Property(e => e.Multitext).HasColumnName("multitext");

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .HasColumnName("name");

                entity.Property(e => e.SortOrder)
                    .HasColumnName("sort_order")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Src)
                    .HasMaxLength(255)
                    .HasColumnName("src");

                entity.Property(e => e.SrcMobile)
                    .HasMaxLength(255)
                    .HasColumnName("src_mobile");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BannerCat>(entity =>
            {
                entity.ToTable("banner_cat", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("image");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Path)
                    .HasMaxLength(100)
                    .HasColumnName("path");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Boxpage>(entity =>
            {
                entity.ToTable("boxpage", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BoxpageCatId).HasColumnName("boxpage_cat_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Link)
                    .HasMaxLength(500)
                    .HasColumnName("link");

                entity.Property(e => e.Multitext).HasColumnName("multitext");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ShortDescription).HasColumnName("short_description");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Src)
                    .HasMaxLength(255)
                    .HasColumnName("src");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SubName)
                    .HasMaxLength(255)
                    .HasColumnName("sub_name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BoxpageCat>(entity =>
            {
                entity.ToTable("boxpage_cat", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("image");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Path)
                    .HasMaxLength(100)
                    .HasColumnName("path");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BoxpageMedia>(entity =>
            {
                entity.ToTable("boxpage_media", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BoxpageId).HasColumnName("boxpage_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Path)
                    .HasMaxLength(255)
                    .HasColumnName("path");

                entity.Property(e => e.PathVideo)
                    .HasMaxLength(255)
                    .HasColumnName("path_video");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.SubType).HasColumnName("sub_type");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CitiesDistrict>(entity =>
            {
                entity.ToTable("cities_district", "dongthucvat");

                entity.HasIndex(e => e.CrawlId, "id_crawl");

                entity.HasIndex(e => e.ParentId, "id_parent");

                entity.HasIndex(e => e.Type, "type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("alias");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code");

                entity.Property(e => e.CrawlId).HasColumnName("crawl_id");

                entity.Property(e => e.IsHome).HasColumnName("is_home");

                entity.Property(e => e.Lat)
                    .HasMaxLength(255)
                    .HasColumnName("lat");

                entity.Property(e => e.Lng)
                    .HasMaxLength(255)
                    .HasColumnName("lng");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.SortOrderFooter).HasColumnName("sort_order_footer");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CitiesStreet>(entity =>
            {
                entity.ToTable("cities_street", "dongthucvat");

                entity.HasIndex(e => new { e.IdCity, e.IdDistrict }, "id_city");

                entity.HasIndex(e => e.CrawlId, "id_crawl");

                entity.HasIndex(e => e.Type, "type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(255)
                    .HasColumnName("alias");

                entity.Property(e => e.CrawlId).HasColumnName("crawl_id");

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.IdDistrict).HasColumnName("id_district");

                entity.Property(e => e.Lat)
                    .HasMaxLength(255)
                    .HasColumnName("lat");

                entity.Property(e => e.Lng)
                    .HasMaxLength(255)
                    .HasColumnName("lng");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CitiesWard>(entity =>
            {
                entity.ToTable("cities_ward", "dongthucvat");

                entity.HasIndex(e => e.Alias, "alias");

                entity.HasIndex(e => e.CitiesId, "id_city");

                entity.HasIndex(e => e.CitiesDistrictId, "id_district");

                entity.HasIndex(e => e.Type, "type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(255)
                    .HasColumnName("alias");

                entity.Property(e => e.CitiesDistrictId).HasColumnName("cities_district_id");

                entity.Property(e => e.CitiesId).HasColumnName("cities_id");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code");

                entity.Property(e => e.CrawlId).HasColumnName("crawl_id");

                entity.Property(e => e.Lat)
                    .HasMaxLength(255)
                    .HasColumnName("lat");

                entity.Property(e => e.Lng)
                    .HasMaxLength(255)
                    .HasColumnName("lng");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<DtvBo>(entity =>
            {
                entity.ToTable("dtv_bo", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.IdDtvLop).HasColumnName("id_dtv_lop");

                entity.Property(e => e.Loai).HasColumnName("loai");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NameLatinh)
                    .HasMaxLength(255)
                    .HasColumnName("name_latinh");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<DtvHo>(entity =>
            {
                entity.ToTable("dtv_ho", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.IdDtvBo).HasColumnName("id_dtv_bo");

                entity.Property(e => e.Loai).HasColumnName("loai");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NameLatinh)
                    .HasMaxLength(255)
                    .HasColumnName("name_latinh");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<DtvLoai>(entity =>
            {
                entity.ToTable("dtv_loai", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.DacDiem).HasColumnName("dac_diem");

                entity.Property(e => e.FileDinhKem).HasColumnName("file_dinh_kem");

                entity.Property(e => e.GiaTriSuDung).HasColumnName("gia_tri_su_dung");

                entity.Property(e => e.IdDtvHo).HasColumnName("id_dtv_ho");

                entity.Property(e => e.Loai).HasColumnName("loai");

                entity.Property(e => e.MucDoBaoTonIucn).HasColumnName("muc_do_bao_ton_iucn");

                entity.Property(e => e.MucDoBaoTonNd64cp).HasColumnName("muc_do_bao_ton_nd64cp");

                entity.Property(e => e.MucDoBaoTonNdcp).HasColumnName("muc_do_bao_ton_ndcp");

                entity.Property(e => e.MucDoBaoTonSdvn).HasColumnName("muc_do_bao_ton_sdvn");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NameLatinh)
                    .HasMaxLength(255)
                    .HasColumnName("name_latinh");

                entity.Property(e => e.NguonTaiLieu)
                    .HasMaxLength(255)
                    .HasColumnName("nguon_tai_lieu");

                entity.Property(e => e.PhanBo)
                    .HasMaxLength(255)
                    .HasColumnName("phan_bo");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.TenKhac)
                    .HasMaxLength(255)
                    .HasColumnName("ten_khac");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<DtvLop>(entity =>
            {
                entity.ToTable("dtv_lop", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.IdDtvNganh).HasColumnName("id_dtv_nganh");

                entity.Property(e => e.Loai).HasColumnName("loai");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NameLatinh)
                    .HasMaxLength(255)
                    .HasColumnName("name_latinh");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<DtvNganh>(entity =>
            {
                entity.ToTable("dtv_nganh", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.Loai).HasColumnName("loai");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NameLatinh)
                    .HasMaxLength(255)
                    .HasColumnName("name_latinh");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<EmailLetter>(entity =>
            {
                entity.ToTable("email_letter", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<ImageGeneral>(entity =>
            {
                entity.ToTable("image_general", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.IdDir)
                    .HasColumnName("id_dir")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mode).HasColumnName("mode");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .HasColumnName("title");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<ImageGeneralDirectory>(entity =>
            {
                entity.ToTable("image_general_directory", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.ToTable("log", "dongthucvat");

                entity.HasIndex(e => e.Category, "idx_log_category");

                entity.HasIndex(e => e.Level, "idx_log_level");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Category)
                    .HasMaxLength(255)
                    .HasColumnName("category");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.LogTime).HasColumnName("log_time");

                entity.Property(e => e.Message).HasColumnName("message");

                entity.Property(e => e.Prefix).HasColumnName("prefix");
            });

            modelBuilder.Entity<LogAction>(entity =>
            {
                entity.ToTable("log_action", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Action)
                    .HasMaxLength(128)
                    .HasColumnName("action");

                entity.Property(e => e.Controller)
                    .HasMaxLength(128)
                    .HasColumnName("controller");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ip)
                    .HasMaxLength(64)
                    .HasColumnName("ip");

                entity.Property(e => e.Module)
                    .HasMaxLength(128)
                    .HasColumnName("module");

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .HasColumnName("url");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<LogActionAdmin>(entity =>
            {
                entity.ToTable("log_action_admin", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Action)
                    .HasMaxLength(128)
                    .HasColumnName("action");

                entity.Property(e => e.AfterData).HasColumnName("after_data");

                entity.Property(e => e.BeforData).HasColumnName("befor_data");

                entity.Property(e => e.Controller)
                    .HasMaxLength(128)
                    .HasColumnName("controller");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdObject).HasColumnName("id_object");

                entity.Property(e => e.Ip)
                    .HasMaxLength(64)
                    .HasColumnName("ip");

                entity.Property(e => e.Module)
                    .HasMaxLength(128)
                    .HasColumnName("module");

                entity.Property(e => e.NameObject)
                    .HasMaxLength(255)
                    .HasColumnName("name_object");

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .HasColumnName("url");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<LogIpLogin>(entity =>
            {
                entity.ToTable("log_ip_login", "dongthucvat");

                entity.HasIndex(e => e.Ip, "ip");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ip)
                    .HasMaxLength(32)
                    .HasColumnName("ip");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");

                entity.Property(e => e.Vcount).HasColumnName("vcount");
            });

            modelBuilder.Entity<LogSubscribeError>(entity =>
            {
                entity.ToTable("log_subscribe_error", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErrMessage).HasColumnName("err_message");

                entity.Property(e => e.ErrorCode).HasColumnName("error_code");

                entity.Property(e => e.Ip)
                    .HasMaxLength(255)
                    .HasColumnName("ip");
            });

            modelBuilder.Entity<Menus>(entity =>
            {
                entity.ToTable("menus", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.GenUrl)
                    .HasMaxLength(255)
                    .HasColumnName("gen_url");

                entity.Property(e => e.IdObject).HasColumnName("id_object");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("image");

                entity.Property(e => e.ImageHover)
                    .HasMaxLength(255)
                    .HasColumnName("image_hover");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LinkMenu)
                    .HasMaxLength(255)
                    .HasColumnName("link_menu");

                entity.Property(e => e.MenuGroupId).HasColumnName("menu_group_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Path)
                    .HasMaxLength(100)
                    .HasColumnName("path");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeMenu).HasColumnName("type_menu");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.ToTable("news", "dongthucvat");

                entity.HasIndex(e => e.NewsCatId, "id_cat");

                entity.HasIndex(e => e.IsHot, "is_hot");

                entity.HasIndex(e => e.Alias, "news$alias")
                    .IsUnique();

                entity.HasIndex(e => e.Status, "status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(255)
                    .HasColumnName("alias");

                entity.Property(e => e.Author)
                    .HasMaxLength(200)
                    .HasColumnName("author");

                entity.Property(e => e.ContentSeo).HasColumnName("content_seo");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("image");

                entity.Property(e => e.IsHot)
                    .HasColumnName("is_hot")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSystem)
                    .HasColumnName("is_system")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KeySeo)
                    .HasMaxLength(255)
                    .HasColumnName("key_seo");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.NewsCatId)
                    .HasColumnName("news_cat_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PostAt)
                    .HasColumnType("datetime")
                    .HasColumnName("post_at");

                entity.Property(e => e.RootNewsCatId).HasColumnName("root_news_cat_id");

                entity.Property(e => e.ShortDescription).HasColumnName("short_description");

                entity.Property(e => e.SortOrder)
                    .HasColumnName("sort_order")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Source)
                    .HasMaxLength(200)
                    .HasColumnName("source");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TitleSeo)
                    .HasMaxLength(300)
                    .HasColumnName("title_seo");

                entity.Property(e => e.TotalView)
                    .HasColumnName("total_view")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<NewsCat>(entity =>
            {
                entity.ToTable("news_cat", "dongthucvat");

                entity.HasIndex(e => e.Alias, "news_cat$idx_alias")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(255)
                    .HasColumnName("alias");

                entity.Property(e => e.ContentSeo).HasColumnName("content_seo");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("image");

                entity.Property(e => e.KeySeo).HasColumnName("key_seo");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Path)
                    .HasMaxLength(100)
                    .HasColumnName("path");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.TitleSeo)
                    .HasMaxLength(255)
                    .HasColumnName("title_seo");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<NewsCatRel>(entity =>
            {
                entity.HasKey(e => new { e.NewsId, e.NewsCatId })
                    .HasName("PK_news_cat_rel_news_id");

                entity.ToTable("news_cat_rel", "dongthucvat");

                entity.Property(e => e.NewsId).HasColumnName("news_id");

                entity.Property(e => e.NewsCatId).HasColumnName("news_cat_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");
            });

            modelBuilder.Entity<RoutePage>(entity =>
            {
                entity.ToTable("route_page", "dongthucvat");

                entity.HasIndex(e => e.Name, "route_page$name")
                    .IsUnique();

                entity.HasIndex(e => e.Route, "route_page$route")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("route");
            });

            modelBuilder.Entity<SeoPage>(entity =>
            {
                entity.ToTable("seo_page", "dongthucvat");

                entity.HasIndex(e => new { e.RouteId, e.Language }, "seo_page$unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FaceDescription)
                    .HasMaxLength(255)
                    .HasColumnName("face_description");

                entity.Property(e => e.FaceImage)
                    .HasMaxLength(255)
                    .HasColumnName("face_image");

                entity.Property(e => e.FaceTitle)
                    .HasMaxLength(255)
                    .HasColumnName("face_title");

                entity.Property(e => e.IdRelated).HasColumnName("id_related");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.Multitext).HasColumnName("multitext");

                entity.Property(e => e.PageDescription)
                    .HasMaxLength(255)
                    .HasColumnName("page_description");

                entity.Property(e => e.PageKeywords)
                    .HasMaxLength(255)
                    .HasColumnName("page_keywords");

                entity.Property(e => e.PageTitle)
                    .HasMaxLength(255)
                    .HasColumnName("page_title");

                entity.Property(e => e.RouteId).HasColumnName("route_id");

                entity.Property(e => e.RouteName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("route_name");
            });

            modelBuilder.Entity<SiteContact>(entity =>
            {
                entity.ToTable("site_contact", "dongthucvat");

                entity.HasIndex(e => e.Language, "site_contact$language_unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.EmbedScriptBodyBegin).HasColumnName("embed_script_body_begin");

                entity.Property(e => e.EmbedScriptBodyEnd).HasColumnName("embed_script_body_end");

                entity.Property(e => e.EmbedScriptHead).HasColumnName("embed_script_head");

                entity.Property(e => e.Fax)
                    .HasMaxLength(255)
                    .HasColumnName("fax");

                entity.Property(e => e.Hotline)
                    .HasMaxLength(255)
                    .HasColumnName("hotline");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .HasColumnName("language");

                entity.Property(e => e.LinkFace)
                    .HasMaxLength(255)
                    .HasColumnName("link_face");

                entity.Property(e => e.LinkFavicon)
                    .HasMaxLength(255)
                    .HasColumnName("link_favicon");

                entity.Property(e => e.LinkInsta)
                    .HasMaxLength(255)
                    .HasColumnName("link_insta");

                entity.Property(e => e.LinkLogo)
                    .HasMaxLength(255)
                    .HasColumnName("link_logo");

                entity.Property(e => e.LinkLogoFooter)
                    .HasMaxLength(255)
                    .HasColumnName("link_logo_footer");

                entity.Property(e => e.LinkMap).HasColumnName("link_map");

                entity.Property(e => e.LinkMessenger)
                    .HasMaxLength(255)
                    .HasColumnName("link_messenger");

                entity.Property(e => e.LinkTwitter)
                    .HasMaxLength(255)
                    .HasColumnName("link_twitter");

                entity.Property(e => e.LinkYoutube)
                    .HasMaxLength(255)
                    .HasColumnName("link_youtube");

                entity.Property(e => e.LinkZalo)
                    .HasMaxLength(255)
                    .HasColumnName("link_zalo");

                entity.Property(e => e.Multitext).HasColumnName("multitext");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<Subscribe>(entity =>
            {
                entity.ToTable("subscribe", "dongthucvat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cookies)
                    .HasMaxLength(1000)
                    .HasColumnName("cookies");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.File)
                    .HasMaxLength(255)
                    .HasColumnName("file");

                entity.Property(e => e.Ip)
                    .HasMaxLength(255)
                    .HasColumnName("ip");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .HasColumnName("phone");

                entity.Property(e => e.Phongban)
                    .HasMaxLength(255)
                    .HasColumnName("phongban");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UtmCampaign)
                    .HasMaxLength(255)
                    .HasColumnName("utm_campaign");

                entity.Property(e => e.UtmContent)
                    .HasMaxLength(255)
                    .HasColumnName("utm_content");

                entity.Property(e => e.UtmMedium)
                    .HasMaxLength(255)
                    .HasColumnName("utm_medium");

                entity.Property(e => e.UtmReferrer)
                    .HasMaxLength(255)
                    .HasColumnName("utm_referrer");

                entity.Property(e => e.UtmSource)
                    .HasMaxLength(255)
                    .HasColumnName("utm_source");

                entity.Property(e => e.UtmTerm)
                    .HasMaxLength(255)
                    .HasColumnName("utm_term");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.ToTable("tag", "dongthucvat");

                entity.HasIndex(e => new { e.Status, e.FeatureTag }, "status");

                entity.HasIndex(e => e.Status, "status_2");

                entity.HasIndex(e => e.Tag1, "tag$tag")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DesSeobox).HasColumnName("des_seobox");

                entity.Property(e => e.FeatureTag)
                    .HasColumnName("feature_tag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.PageDescription)
                    .HasMaxLength(160)
                    .HasColumnName("page_description");

                entity.Property(e => e.PageTitle)
                    .HasMaxLength(255)
                    .HasColumnName("page_title");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Tag1)
                    .HasMaxLength(255)
                    .HasColumnName("tag");

                entity.Property(e => e.TitleSeobox)
                    .HasMaxLength(255)
                    .HasColumnName("title_seobox");
            });

            modelBuilder.Entity<TagRel>(entity =>
            {
                entity.HasKey(e => new { e.TagId, e.ObjectId, e.Type })
                    .HasName("PK_tag_rel_tag_id");

                entity.ToTable("tag_rel", "dongthucvat");

                entity.Property(e => e.TagId).HasColumnName("tag_id");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.SortOrder)
                    .HasColumnName("sort_order")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("user", "dongthucvat");

                entity.HasIndex(e => e.CitiesDistrictId, "FK_acc");

                entity.HasIndex(e => e.CitiesId, "FK_acc__city_id");

                entity.HasIndex(e => e.Email, "index_email");

                entity.HasIndex(e => e.Phone, "index_phone");

                entity.HasIndex(e => e.Status, "status");

                entity.HasIndex(e => e.Email, "user$email")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.Avatar)
                    .HasMaxLength(255)
                    .HasColumnName("avatar");

                entity.Property(e => e.CitiesDistrictId).HasColumnName("cities_district_id");

                entity.Property(e => e.CitiesId).HasColumnName("cities_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dob)
                    .HasColumnType("date")
                    .HasColumnName("dob");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .HasColumnName("first_name");

                entity.Property(e => e.Gender)
                    .HasMaxLength(6)
                    .HasColumnName("gender");

                entity.Property(e => e.IsAdmin).HasColumnName("is_admin");

                entity.Property(e => e.LastSigninedTime)
                    .HasPrecision(0)
                    .HasColumnName("last_signined_time");

                entity.Property(e => e.Password)
                    .HasMaxLength(128)
                    .HasColumnName("password");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .HasColumnName("phone");

                entity.Property(e => e.Role)
                    .HasMaxLength(255)
                    .HasColumnName("role");

                entity.Property(e => e.SecretKey)
                    .HasMaxLength(255)
                    .HasColumnName("secret_key");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}